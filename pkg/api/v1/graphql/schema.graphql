scalar Date

type Query {
    me: User
    pools: [Pool!]!
    estimateMeasurement(
        input: ChemicalInput!
    ): Measurement!
    demandMeasurement(poolID: ID!): Measurement!
    historyOfMeasurement(poolID: ID!, order: Order!, offset: Int, limit: Int): [MeasurementRecord!]!
    historyOfAdditives(poolID: ID!, order: Order!, offset: Int, limit: Int): [Chemicals!]!
    historyOfActions(poolID: ID!, order: Order!, offset: Int, limit: Int): [Action!]!
    recommendedChemicals(poolID: ID!): [ChemicalValue!]!
    migrationStatus(migrationID: ID!): Migration!
}

type Mutation {
    authApple(appleCode:String!, deviceID: ID!): Session!
    addPool(name: String!, volume: Float!): Pool!
    addMeasurement(poolID: ID!, chlorine: Float, ph: Float, alkalinity: Float): MeasurementRecord!
    deleteMeasurement(poolID: ID!, createdAt: Date!): Boolean!
    addChemicals(
        input: ChemicalInput!
    ): Chemicals!
    deleteChemicals(
        poolID: ID!
        createdAt: Date!
    ): Boolean!
    logActions(poolID: ID!, action: [ActionType!]!): Date!
    deleteActionsLog(poolID: ID!, createdAt: Date!): Boolean!
    updatePoolSettings(
        poolID: ID!
        settings: PoolSettingsInput!
    ): PoolSettings!
    migrateFromSheet(sheetLink: String!): ID!
}

type Subscription {
    "Subscription for pool addition."
    onCreatePool: Pool!
    "Subscription for pool update."
    onUpdatePool: Pool!
    "Subscription for pool remove."
    onDeletePool: ID!
}

type Pool {
    id: ID!
    name: String!
    volume: Float!
    settings: PoolSettings
}

type Session {
    token: String!
    expiredAt: Date!
}

type User {
    tokenExpiredAt: Date!
    pools: [Pool!]!
}

type MeasurementRecord {
    measurement: Measurement!
    createdAt: Date!
}

type Measurement {
    chlorine: Float
    ph: Float
    alkalinity: Float
}

enum Order {
    ASC
    DESC
}

type Chemicals {
    value: [ChemicalValue!]!
    createdAt: Date!
}

type ChlorineChemicalValue {
    type: ChlorineChemical!
    value: Float!
}

type AcidChemicalValue {
    type: AcidChemical!
    value: Float!
}

type AlkalinityChemicalValue {
    type: AlkalinityChemical!
    value: Float!
}

union ChemicalValue = ChlorineChemicalValue | AcidChemicalValue | AlkalinityChemicalValue

enum ChlorineChemical{
    CalciumHypochlorite65Percent
    SodiumHypochlorite12Percent
    SodiumHypochlorite14Percent
    TCCA90PercentTablets
    MultiActionTablets
    TCCA90PercentGranules
    Dichlor65Percent
}

enum AcidChemical {
    HydrochloricAcid
    SodiumBisulphate
}

enum AlkalinityChemical {
    SodiumBicarbonate
}

input ChlorineChemicalValueInput {
    type: ChlorineChemical!
    value: Float!
}

input AcidChemicalValueInput {
    type: AcidChemical!
    value: Float!
}

input AlkalinityChemicalValueInput {
    type: AlkalinityChemical!
    value: Float!
}

input ChemicalInput {
    poolID: ID!
    chlorine: [ChlorineChemicalValueInput!]
    acid: [AcidChemicalValueInput!]
    alkalinity: [AlkalinityChemicalValueInput!]
}

type Action {
    types: [ActionType!]!
    createdAt: Date!
}

enum ActionType {
    Net
    Brush
    Vacuum
    Backwash
    ScumLine
    PumpBasketClean
    SkimmerBasketClean
}

input PoolSettingsInput {
    type: PoolType!
    usageType: UsageType!
    locationType: LocationType!
    poolShape: PoolShape!
    coordinates: CoordinatesInput!
}

type PoolSettings {
    type: PoolType!
    usageType: UsageType!
    locationType: LocationType!
    shape: PoolShape!
    coordinates: Coordinates!
}

enum PoolType {
    Infinity
    Overflow
    Skimmer
}

enum UsageType {
    Community
    Private
    Holiday
}

enum LocationType {
    Indoor
    Outdoor
}

enum PoolShape {
    Rectangle
    Circle
    Oval
    Kidney
    L
    T
    FreeForm
}

type Coordinates {
    latitude: Float!
    longitude: Float!
}

input CoordinatesInput {
    latitude: Float!
    longitude: Float!
}

type Migration {
    id: ID!
    status: MigrationStatus!
}

enum MigrationStatus {
    Unknown
    Pending
    Done
    Failed
}