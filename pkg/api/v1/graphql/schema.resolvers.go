package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	null "github.com/guregu/null/v5"
	"github.com/vektah/gqlparser/v2/gqlerror"

	rootCommon "github.com/PoolHealth/PoolHealthServer/common"
	authPkg "github.com/PoolHealth/PoolHealthServer/internal/auth"
	"github.com/PoolHealth/PoolHealthServer/pkg/api/v1/common"
	"github.com/PoolHealth/PoolHealthServer/pkg/api/v1/graphql/generated"
	model "github.com/PoolHealth/PoolHealthServer/pkg/api/v1/models"
)

// AuthApple is the resolver for the authApple field.
func (r *mutationResolver) AuthApple(ctx context.Context, appleCode string, deviceID common.ID) (*model.Session, error) {
	session, err := r.auth.Auth(ctx, appleCode)
	if err != nil {
		return nil, gqlerror.Wrap(err)
	}
	return &model.Session{
		Token:     session.JWT,
		ExpiredAt: session.ExpiredAt,
	}, nil
}

// AddPool is the resolver for the addPool field.
func (r *mutationResolver) AddPool(ctx context.Context, name string, volume float64) (*model.Pool, error) {
	user, err := authPkg.GetUser(ctx)
	if err != nil {
		return nil, err
	}
	pool, err := r.poolData.Create(ctx, user.ID, &rootCommon.PoolData{
		Name:   name,
		Volume: volume,
	})
	if err != nil {
		return nil, castGQLError(ctx, err)
	}

	return model.PoolFromCommon(pool), nil
}

// AddMeasurement is the resolver for the addMeasurement field.
func (r *mutationResolver) AddMeasurement(ctx context.Context, poolID common.ID, chlorine float64, ph float64, alkalinity float64) (*model.Measurement, error) {
	res, err := r.measurementHistory.CreateMeasurement(ctx, rootCommon.Measurement{
		PoolID:     uuid.UUID(poolID),
		Chlorine:   null.FloatFrom(chlorine),
		PH:         null.FloatFrom(ph),
		Alkalinity: null.FloatFrom(alkalinity),
	})
	if err != nil {
		return nil, castGQLError(ctx, err)
	}

	return model.MeasurementFromCommon(res), nil
}

// AddAdditives is the resolver for the addAdditives field.
func (r *mutationResolver) AddAdditives(ctx context.Context, poolID common.ID, calciumHypochlorite65Percent *float64, sodiumHypochlorite12Percent *float64, sodiumHypochlorite14Percent *float64, tCCA90PercentTablets *float64, multiActionTablets *float64, tCCA90PercentGranules *float64, dichlor65Percent *float64) (*model.Additives, error) {
	ad := &rootCommon.Additives{
		PoolID:   uuid.UUID(poolID),
		Products: make(map[rootCommon.ChemicalProduct]float64),
	}

	if calciumHypochlorite65Percent != nil {
		ad.Products[rootCommon.CalciumHypochlorite65Percent] = *calciumHypochlorite65Percent
	}

	if sodiumHypochlorite12Percent != nil {
		ad.Products[rootCommon.SodiumHypochlorite12Percent] = *sodiumHypochlorite12Percent
	}

	if sodiumHypochlorite14Percent != nil {
		ad.Products[rootCommon.SodiumHypochlorite14Percent] = *sodiumHypochlorite14Percent
	}

	if tCCA90PercentTablets != nil {
		ad.Products[rootCommon.TCCA90PercentTablets] = *tCCA90PercentTablets
	}

	if multiActionTablets != nil {
		ad.Products[rootCommon.MultiActionTablets] = *multiActionTablets
	}

	if tCCA90PercentGranules != nil {
		ad.Products[rootCommon.TCCA90PercentGranules] = *tCCA90PercentGranules
	}

	if dichlor65Percent != nil {
		ad.Products[rootCommon.Dichlor65Percent] = *dichlor65Percent
	}

	res, err := r.additivesHistory.CreateAdditives(ctx, ad)
	if err != nil {
		return nil, castGQLError(ctx, err)
	}

	return model.AdditivesFromCommon(res), nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user, err := authPkg.GetUser(ctx)
	if err != nil {
		return nil, castGQLError(ctx, err)
	}
	return &model.User{TokenExpiredAt: user.Session.ExpiredAt}, nil
}

// Pools is the resolver for the pools field.
func (r *queryResolver) Pools(ctx context.Context) ([]*model.Pool, error) {
	user, err := authPkg.GetUser(ctx)
	if err != nil {
		return nil, err
	}
	pools, err := r.poolData.List(ctx, user.ID)
	if err != nil {
		return nil, castGQLError(ctx, err)
	}

	result := make([]*model.Pool, len(pools))
	for i, pool := range pools {
		result[i] = model.PoolFromCommon(&pool)
	}

	return result, nil
}

// HistoryOfMeasurement is the resolver for the historyOfMeasurement field.
func (r *queryResolver) HistoryOfMeasurement(ctx context.Context, poolID common.ID, order model.Order, offset *int, limit *int) ([]*model.Measurement, error) {
	res, err := r.measurementHistory.QueryMeasurement(ctx, uuid.UUID(poolID), order.ToCommon(), offset, limit)
	if err != nil {
		return nil, castGQLError(ctx, err)
	}

	result := make([]*model.Measurement, len(res))
	for i, m := range res {
		result[i] = model.MeasurementFromCommon(m)
	}

	return result, nil
}

// HistoryOfAdditives is the resolver for the historyOfAdditives field.
func (r *queryResolver) HistoryOfAdditives(ctx context.Context, poolID common.ID, order model.Order, offset *int, limit *int) ([]*model.Additives, error) {
	res, err := r.additivesHistory.QueryAdditives(ctx, uuid.UUID(poolID), order.ToCommon(), offset, limit)
	if err != nil {
		return nil, castGQLError(ctx, err)
	}

	result := make([]*model.Additives, len(res))
	for i, a := range res {
		result[i] = model.AdditivesFromCommon(&a)
	}

	return result, nil
}

// EstimateChlorine is the resolver for the estimateChlorine field.
func (r *queryResolver) EstimateChlorine(ctx context.Context, poolID common.ID, calciumHypochlorite65Percent *float64, sodiumHypochlorite12Percent *float64, sodiumHypochlorite14Percent *float64, tCCA90PercentTablets *float64, multiActionTablets *float64, tCCA90PercentGranules *float64, dichlor65Percent *float64) (float64, error) {
	panic(fmt.Errorf("not implemented: EstimateChlorine - estimateChlorine"))
}

// OnCreatePool is the resolver for the onCreatePool field.
func (r *subscriptionResolver) OnCreatePool(ctx context.Context) (<-chan *model.Pool, error) {
	ch := make(chan *model.Pool)
	res, err := r.SubscribeOnCreate(ctx)
	if err != nil {
		return nil, err
	}

	go func() {
		for {
			select {
			case <-ctx.Done():
				close(ch)
			case pool := <-res:
				ch <- model.PoolFromCommon(pool)
			}
		}
	}()

	return ch, nil
}

// OnUpdatePool is the resolver for the onUpdatePool field.
func (r *subscriptionResolver) OnUpdatePool(ctx context.Context) (<-chan *model.Pool, error) {
	ch := make(chan *model.Pool)
	res, err := r.SubscribeOnUpdate(ctx)
	if err != nil {
		return nil, err
	}

	go func() {
		for {
			select {
			case <-ctx.Done():
				close(ch)
			case pool := <-res:
				ch <- model.PoolFromCommon(pool)
			}
		}
	}()

	return ch, nil
}

// OnDeletePool is the resolver for the onDeletePool field.
func (r *subscriptionResolver) OnDeletePool(ctx context.Context) (<-chan common.ID, error) {
	ch := make(chan common.ID)
	res, err := r.SubscribeOnDelete(ctx)
	if err != nil {
		return nil, err
	}

	go func() {
		for {
			select {
			case <-ctx.Done():
				close(ch)
			case id := <-res:
				ch <- common.ID(id)
			}
		}
	}()

	return ch, nil
}

// Pools is the resolver for the pools field.
func (r *userResolver) Pools(ctx context.Context, obj *model.User) ([]*model.Pool, error) {
	user, err := authPkg.GetUser(ctx)
	if err != nil {
		return nil, err
	}
	pools, err := r.poolData.List(ctx, user.ID)
	if err != nil {
		return nil, castGQLError(ctx, err)
	}

	result := make([]*model.Pool, len(pools))
	for i, pool := range pools {
		result[i] = model.PoolFromCommon(&pool)
	}

	return result, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
